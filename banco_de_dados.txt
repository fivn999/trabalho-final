CREATE DATABASE canes;

USE canes;

CREATE TABLE cursos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL
    valor INT NOT NULL
);

CREATE TABLE usuario (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    idade INT NOT NULL,
    cpf INT NOT NULL,
    telefone INT NOT NULL
); 





2. Sistema de Reservas de Hotel ou Restaurante
Descrição: Um site fictício para reservas de um hotel ou restaurante. O sistema deve permitir que os clientes façam reservas, visualizem as reservas disponíveis, e gerenciem suas próprias reservas (cancelar ou editar).

Funcionalidades principais:

Cadastro e login de usuários.
Visualização das opções de reserva disponíveis (ex.: quartos de hotel ou mesas do restaurante).
Realização de reservas (com data e hora específicas).
Edição e cancelamento de reservas.
Histórico de reservas feitas por cada usuário.
Tecnologias:

Banco de dados: MySQL para armazenar dados de clientes, reservas e disponibilidade.
Modelo de dados:
Usuários: id, nome, email, senha.
Reservas: id, id do usuário, tipo de reserva (hotel ou restaurante), data e hora, status da reserva.
Quartos ou Mesas: id, tipo (quarto de luxo, quarto standard, mesa para 2, mesa para 4, etc.), disponibilidade.
Framework: Flask ou Django.
Autenticação: Login e sistema de autenticação de usuários.
Objetivos do trabalho:

Criar um banco de dados com várias tabelas interligadas (usuários, reservas, disponibilidade de quartos/mesas).
Trabalhar com datas e horários no banco de dados.
Manipulação de dados e controle de disponibilidade (ex.: se uma mesa ou quarto está reservado, não pode ser reservado novamente).


-- Criando o banco de dados
CREATE DATABASE reservas_hotel;

-- Usando o banco de dados
USE reservas_hotel;

-- Tabela para armazenar os usuários (clientes e administradores)
CREATE TABLE usuarios (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  senha VARCHAR(255) NOT NULL,
  tipo ENUM('cliente', 'admin') NOT NULL DEFAULT 'cliente'
);

-- Tabela para armazenar os quartos ou mesas disponíveis
CREATE TABLE disponibilidade (
  id INT AUTO_INCREMENT PRIMARY KEY,
  tipo ENUM('quarto', 'mesa') NOT NULL,
  descricao VARCHAR(255),
  capacidade INT NOT NULL,
  disponivel BOOLEAN DEFAULT TRUE
);

-- Tabela para armazenar as reservas
CREATE TABLE reservas (
  id INT AUTO_INCREMENT PRIMARY KEY,
  usuario_id INT,
  disponibilidade_id INT,
  data_reserva DATETIME NOT NULL,
  data_checkin DATETIME,
  data_checkout DATETIME,
  status ENUM('pendente', 'confirmada', 'cancelada') DEFAULT 'pendente',
  FOREIGN KEY (usuario_id) REFERENCES usuarios(id),
  FOREIGN KEY (disponibilidade_id) REFERENCES disponibilidade(id)
);


Explicação das Tabelas:
usuarios: Armazena as informações dos usuários, como nome, email, senha (com a senha devidamente criptografada) e o tipo de usuário (cliente ou administrador).

disponibilidade: Armazena os quartos ou mesas disponíveis para reserva. Cada item tem uma descrição, tipo (quarto ou mesa), capacidade (número de pessoas) e um campo de disponibilidade (TRUE ou FALSE).

reservas: Armazena as reservas feitas pelos clientes. Cada reserva tem uma referência ao usuário (usuario_id) e à disponibilidade (disponibilidade_id), além de informações sobre a data de reserva, check-in, check-out e o status da reserva.

Explicação das Rotas:
Cadastro de usuário (/cadastro): O usuário pode se cadastrar fornecendo nome, email e senha (a senha é criptografada usando o algoritmo SHA-256).

Login de usuário (/login): O usuário pode fazer login fornecendo seu email e senha (verificados e criptografados).

Página inicial (/): Exibe os quartos/mesas disponíveis para reserva (com o campo disponivel = TRUE no banco de dados).

Reserva (/reservar/<int:id>): Permite ao usuário fazer uma reserva de um quarto ou mesa, alterando o status de disponibilidade no banco de dados para FALSE e criando uma entrada na tabela reservas.

Minhas Reservas (/minhas_reservas): Exibe todas as reservas feitas pelo usuário logado.



